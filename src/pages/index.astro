---
// No server-side logic needed for this page
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
		<title>Sparktech Experiments</title>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
	</head>
	<body>
		<div class="container">
			<div class="currency-tabs">
				<div class="currency-tab active" data-currency="GBP">
					<span class="currency-symbol">£</span>
					<span>Pounds</span>
				</div>
				<div class="currency-tab" data-currency="EUR">
					<span class="currency-symbol">€</span>
					<span>Euros</span>
				</div>
				<div class="currency-tab" data-currency="USD">
					<span class="currency-symbol">$</span>
					<span>USD</span>
				</div>
				<div class="currency-tab" data-currency="CAD">
					<span class="currency-symbol">C$</span>
					<span>CAD</span>
				</div>
			</div>

			<div class="form-container">
				<div class="form-section">
					<h2 class="section-title">Account Information</h2>
					
					<div class="form-group">
						<label class="form-label">Auto-Fill from Text (Optional)</label>
						<textarea 
							class="form-input auto-parse-textarea" 
							id="autoParseText" 
							placeholder=""
							rows="4"
							oninput="parseAccountDetails()"
						></textarea>
						<div class="auto-parse-hint">
							<small>💡 Paste any text containing name, account number, and sort code - we'll extract the details automatically</small>
						</div>
					</div>
					
					<div class="form-group">
						<label class="form-label">Full Name</label>
						<input type="text" class="form-input" id="fullName" placeholder="Enter your full name">
					</div>
					
					<div class="form-group">
						<label class="form-label">Account Number</label>
						<input type="text" class="form-input" id="accountNumber" placeholder="Enter account number">
					</div>
					
					<div class="form-group">
						<label class="form-label">Sort Code</label>
						<input type="text" class="form-input" id="sortCode" placeholder="XX-XX-XX">
					</div>
					
					<button class="generate-btn" onclick="generateDetails()">Generate Banking Details</button>
				</div>

				<div class="form-section">
					<h2 class="section-title">Generated Details</h2>
					
					<div id="devMessage" class="dev-message" style="display: none;">
						<div class="dev-icon">🚧</div>
						<div class="dev-text">Still in Development</div>
						<div class="dev-subtitle">This currency is coming soon</div>
					</div>
					
					<!-- Loading Overlay -->
					<div id="loadingOverlay" class="loading-overlay" style="display: none;">
						<div class="loading-spinner">
							<div class="spinner"></div>
							<div class="loading-text">Creating Beneficiary...</div>
							<div class="loading-subtext">Please wait while we process your request</div>
						</div>
					</div>
					
					<div class="generated-info">
						<div class="info-label">IBAN</div>
						<div class="info-value" id="iban">-</div>
					</div>
					
					<div class="generated-info">
						<div class="info-label">Bank Name</div>
						<div class="info-value" id="bankName">-</div>
					</div>
					
					<div class="info-row">
						<div class="generated-info">
							<div class="info-label">Branch</div>
							<div class="info-value" id="branch">-</div>
						</div>
						<div class="generated-info">
							<div class="info-label">Currency</div>
							<div class="info-value" id="currency">GBP</div>
						</div>
						<div class="generated-info">
							<div class="info-label">BIC/SWIFT Code</div>
							<div class="info-value" id="bic">-</div>
						</div>
					</div>
					
					<!-- Hidden field for API -->
					<div class="generated-info" style="display: none;">
						<div class="info-label">Full Name</div>
						<div class="info-value" id="displayFullName">-</div>
					</div>
					
					<div class="info-row">
						<div class="generated-info">
							<div class="info-label">First Name</div>
							<div class="info-value" id="displayFirstName">-</div>
						</div>
						<div class="generated-info">
							<div class="info-label">Last Name</div>
							<div class="info-value" id="displayLastName">-</div>
						</div>
					</div>
					
					<div class="generated-info">
						<div class="info-label">Account Holder</div>
						<div class="info-value" id="accountHolder">-</div>
					</div>
					
					<div class="info-row">
						<div class="generated-info">
							<div class="info-label">Account Number</div>
							<div class="info-value" id="displayAccountNumber">-</div>
						</div>
						<div class="generated-info">
							<div class="info-label">Sort Code</div>
							<div class="info-value" id="displaySortCode">-</div>
						</div>
					</div>
					
					<!-- Hidden fields for Router Fusion API -->
					<div class="generated-info" style="display: none;">
						<div class="info-label">Entity ID</div>
						<div class="info-value" id="entityId">cd8d29a3-6baa-4f6a-afc9-d22919099bd8</div>
					</div>
					
					<div class="generated-info" style="display: none;">
						<div class="info-label">User ID</div>
						<div class="info-value" id="userId">db5e3583-9ca0-45fc-87b6-dceeddd120a6</div>
					</div>
					
					<div class="info-row">
						<div class="generated-info">
							<div class="info-label">Address</div>
							<div class="info-value" id="address">-</div>
						</div>
						<div class="generated-info">
							<div class="info-label">Email</div>
							<div class="info-value" id="entityEmail">business@sparktechs.ca</div>
						</div>
					</div>
					
					<div class="info-row">
						<div class="generated-info">
							<div class="info-label">City</div>
							<div class="info-value" id="city">-</div>
						</div>
						<div class="generated-info">
							<div class="info-label">Postal Code</div>
							<div class="info-value" id="zip">-</div>
						</div>
						<div class="generated-info">
							<div class="info-label">Phone</div>
							<div class="info-value" id="phone">-</div>
						</div>
					</div>
					
					<button class="merchant-btn" onclick="createMerchant()">Create Beneficiary</button>
				</div>
			</div>
		</div>

		<!-- Result Modal -->
		<div id="resultModal" class="modal-overlay" style="display: none;">
			<div class="modal-content">
				<div class="modal-header">
					<h3 id="modalTitle">Beneficiary Creation Result</h3>
					<button class="modal-close" onclick="closeModal()">&times;</button>
				</div>
				<div class="modal-body">
					<div id="modalIcon" class="modal-icon"></div>
					<div id="modalMessage" class="modal-message"></div>
					<div id="modalDetails" class="modal-details"></div>
				</div>
				<div class="modal-footer">
					<button class="modal-btn modal-btn-primary" onclick="closeModal()">Close</button>
				</div>
			</div>
		</div>

		<style>
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family: 'Inter', sans-serif;
				background: #0a0a0a;
				color: #ffffff;
				min-height: 100vh;
				padding: 2rem;
				display: flex;
				align-items: center;
				justify-content: center;
				background-image: 
					radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
					radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.15) 0%, transparent 50%),
					radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.1) 0%, transparent 50%);
			}

			.container {
				width: 100%;
				max-width: 1000px;
				background: #1a1a1a;
				border-radius: 16px;
				border: 1px solid #2a2a2a;
				padding: 1.5rem;
				box-shadow: 0 15px 30px rgba(0, 0, 0, 0.6);
			}

			.currency-tabs {
				display: flex;
				gap: 0.3rem;
				margin-bottom: 1rem;
				justify-content: center;
				background: #161616;
				padding: 0.2rem;
				border-radius: 8px;
				border: 1px solid #2a2a2a;
			}

			.currency-tab {
				background: transparent;
				border: none;
				border-radius: 6px;
				padding: 0.4rem 0.7rem;
				color: #888;
				cursor: pointer;
				transition: all 0.3s ease;
				display: flex;
				align-items: center;
				gap: 0.2rem;
				font-weight: 500;
				position: relative;
				font-size: 0.75rem;
			}

			.currency-tab:hover {
				color: #fff;
				background: #2a2a2a;
			}

			.currency-tab.active {
				background: linear-gradient(135deg, #667eea, #764ba2);
				color: #fff;
				box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
			}

			.currency-tab.active::before {
				content: '';
				position: absolute;
				inset: -1px;
				background: linear-gradient(135deg, #667eea, #764ba2);
				border-radius: inherit;
				z-index: -1;
				filter: blur(6px);
				opacity: 0.7;
			}

			.currency-symbol {
				font-size: 0.85rem;
				font-weight: 600;
			}

			.form-container {
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 1.5rem;
				margin-top: 1.5rem;
			}

			.form-section {
				background: #161616;
				border: 1px solid #2a2a2a;
				border-radius: 12px;
				padding: 1rem;
			}

			.section-title {
				color: #fff;
				font-size: 1.1rem;
				font-weight: 600;
				margin-bottom: 1rem;
				text-align: center;
				background: linear-gradient(135deg, #fff, #ccc);
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
				background-clip: text;
			}

			.form-group {
				margin-bottom: 1rem;
			}

			.form-label {
				color: #ccc;
				font-weight: 500;
				margin-bottom: 0.5rem;
				display: block;
				font-size: 0.9rem;
			}

			.form-input {
				width: 100%;
				padding: 0.7rem;
				background: #0a0a0a;
				border: 1px solid #333;
				border-radius: 8px;
				color: #fff;
				font-size: 0.85rem;
				transition: all 0.3s ease;
			}

			.form-input::placeholder {
				color: #666;
			}

			.form-input:focus {
				outline: none;
				border-color: #667eea;
				background: #111;
				box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
			}

			.auto-parse-textarea {
				resize: vertical;
				min-height: 80px;
				font-family: 'Inter', sans-serif;
				line-height: 1.4;
			}

			.auto-parse-hint {
				margin-top: 0.5rem;
			}

			.auto-parse-hint small {
				color: #888;
				font-size: 0.8rem;
				display: flex;
				align-items: center;
				gap: 0.3rem;
			}

			.generate-btn, .merchant-btn {
				width: 100%;
				padding: 0.7rem;
				background: linear-gradient(135deg, #667eea, #764ba2);
				border: none;
				border-radius: 8px;
				color: white;
				font-weight: 600;
				font-size: 0.85rem;
				cursor: pointer;
				transition: all 0.3s ease;
				margin-top: 0.8rem;
				position: relative;
				overflow: hidden;
			}

			.generate-btn:hover, .merchant-btn:hover {
				transform: translateY(-2px);
				box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
			}

			.generate-btn::before, .merchant-btn::before {
				content: '';
				position: absolute;
				top: 0;
				left: -100%;
				width: 100%;
				height: 100%;
				background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
				transition: left 0.5s;
			}

			.generate-btn:hover::before, .merchant-btn:hover::before {
				left: 100%;
			}

			.generated-info {
				background: #0a0a0a;
				border: 1px solid #333;
				border-radius: 8px;
				padding: 0.6rem;
				margin-bottom: 0.6rem;
				transition: all 0.3s ease;
			}

			.info-row {
				display: flex;
				gap: 0.6rem;
				margin-bottom: 0.6rem;
			}

			.info-row .generated-info {
				flex: 1;
				margin-bottom: 0;
			}

			.generated-info:hover {
				border-color: #667eea;
				box-shadow: 0 4px 15px rgba(102, 126, 234, 0.1);
			}

			.info-label {
				color: #888;
				font-size: 0.75rem;
				font-weight: 500;
				margin-bottom: 0.2rem;
			}

			.info-value {
				color: #fff;
				font-weight: 600;
				font-family: 'Courier New', monospace;
				font-size: 0.85rem;
			}

			.dev-message {
				background: linear-gradient(135deg, #ff6b35, #ff8e35);
				border: none;
				border-radius: 12px;
				padding: 2rem;
				text-align: center;
				margin-bottom: 1rem;
				position: relative;
				overflow: hidden;
			}

			.dev-message::before {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background: repeating-linear-gradient(
					45deg,
					transparent,
					transparent 10px,
					rgba(0, 0, 0, 0.1) 10px,
					rgba(0, 0, 0, 0.1) 20px
				);
			}

			.dev-icon {
				font-size: 2.5rem;
				margin-bottom: 0.5rem;
				position: relative;
				z-index: 1;
			}

			.dev-text {
				color: #fff;
				font-weight: 600;
				font-size: 1.2rem;
				margin-bottom: 0.25rem;
				position: relative;
				z-index: 1;
			}

			.dev-subtitle {
				color: rgba(255, 255, 255, 0.9);
				font-size: 0.9rem;
				position: relative;
				z-index: 1;
			}

			.page-title {
				text-align: center;
				color: #fff;
				font-size: 1.8rem;
				font-weight: 700;
				margin-bottom: 0.8rem;
				background: linear-gradient(135deg, #667eea, #764ba2);
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
				background-clip: text;
			}

			.page-subtitle {
				text-align: center;
				color: #888;
				font-size: 0.9rem;
				margin-bottom: 1.5rem;
			}

			/* Accent elements */
			.accent-line {
				width: 60px;
				height: 3px;
				background: linear-gradient(135deg, #667eea, #764ba2);
				margin: 0 auto 2rem;
				border-radius: 2px;
			}

			/* Loading animation */
			@keyframes pulse {
				0%, 100% { opacity: 1; }
				50% { opacity: 0.6; }
			}

			.loading {
				animation: pulse 1.5s infinite;
			}

			/* Scrollbar styling */
			::-webkit-scrollbar {
				width: 8px;
			}

			::-webkit-scrollbar-track {
				background: #1a1a1a;
			}

			::-webkit-scrollbar-thumb {
				background: #333;
				border-radius: 4px;
			}

			::-webkit-scrollbar-thumb:hover {
				background: #555;
			}

			@media (max-width: 768px) {
				.form-container {
					grid-template-columns: 1fr;
					gap: 2rem;
				}
				
				.currency-tabs {
					flex-wrap: wrap;
				}
				
				.currency-tab {
					padding: 0.75rem 1rem;
					font-size: 0.9rem;
				}
				
				.page-title {
					font-size: 2rem;
				}
			}
			/* Loading Overlay Styles */
			.loading-overlay {
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: rgba(10, 10, 10, 0.95);
				display: flex;
				align-items: center;
				justify-content: center;
				z-index: 9999;
				backdrop-filter: blur(10px);
			}

			.loading-spinner {
				text-align: center;
				color: #ffffff;
			}

			.spinner {
				width: 60px;
				height: 60px;
				border: 4px solid #333;
				border-top: 4px solid #00d4ff;
				border-radius: 50%;
				animation: spin 1s linear infinite;
				margin: 0 auto 20px;
			}

			@keyframes spin {
				0% { transform: rotate(0deg); }
				100% { transform: rotate(360deg); }
			}

			.loading-text {
				font-size: 1.5rem;
				font-weight: 600;
				margin-bottom: 10px;
				color: #ffffff;
			}

			.loading-subtext {
				font-size: 1rem;
				color: #888;
				opacity: 0.8;
			}

			/* Modal Styles */
			.modal-overlay {
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: rgba(0, 0, 0, 0.8);
				display: flex;
				align-items: center;
				justify-content: center;
				z-index: 10000;
				backdrop-filter: blur(5px);
			}

			.modal-content {
				background: #1a1a1a;
				border-radius: 16px;
				border: 1px solid #333;
				max-width: 500px;
				width: 90%;
				max-height: 80vh;
				overflow: hidden;
				box-shadow: 0 20px 40px rgba(0, 0, 0, 0.6);
				animation: modalSlideIn 0.3s ease-out;
			}

			@keyframes modalSlideIn {
				from {
					opacity: 0;
					transform: translateY(-20px) scale(0.95);
				}
				to {
					opacity: 1;
					transform: translateY(0) scale(1);
				}
			}

			.modal-header {
				padding: 20px 24px;
				border-bottom: 1px solid #333;
				display: flex;
				justify-content: space-between;
				align-items: center;
			}

			.modal-header h3 {
				margin: 0;
				color: #ffffff;
				font-size: 1.25rem;
				font-weight: 600;
			}

			.modal-close {
				background: none;
				border: none;
				color: #888;
				font-size: 24px;
				cursor: pointer;
				padding: 0;
				width: 30px;
				height: 30px;
				display: flex;
				align-items: center;
				justify-content: center;
				border-radius: 50%;
				transition: all 0.2s ease;
			}

			.modal-close:hover {
				background: #333;
				color: #ffffff;
			}

			.modal-body {
				padding: 24px;
				text-align: center;
			}

			.modal-icon {
				font-size: 3rem;
				margin-bottom: 16px;
			}

			.modal-icon.success {
				color: #00d4ff;
			}

			.modal-icon.error {
				color: #ff4757;
			}

			.modal-message {
				font-size: 1.1rem;
				font-weight: 500;
				color: #ffffff;
				margin-bottom: 16px;
				line-height: 1.5;
			}

			.modal-details {
				background: #0f0f0f;
				border: 1px solid #333;
				border-radius: 8px;
				padding: 16px;
				margin-top: 16px;
				text-align: left;
			}

			.modal-details pre {
				color: #888;
				font-size: 0.9rem;
				line-height: 1.4;
				margin: 0;
				white-space: pre-wrap;
				word-break: break-word;
			}

			.modal-footer {
				padding: 16px 24px;
				border-top: 1px solid #333;
				display: flex;
				justify-content: flex-end;
				gap: 12px;
			}

			.modal-btn {
				padding: 10px 20px;
				border: none;
				border-radius: 8px;
				font-weight: 500;
				cursor: pointer;
				transition: all 0.2s ease;
				font-size: 0.95rem;
			}

			.modal-btn-primary {
				background: #00d4ff;
				color: #000000;
			}

			.modal-btn-primary:hover {
				background: #00b8e6;
				transform: translateY(-1px);
			}

			.modal-btn-secondary {
				background: #333;
				color: #ffffff;
			}

			.modal-btn-secondary:hover {
				background: #444;
			}
		</style>

		<script>
			let selectedCurrency = 'GBP';

			// Wait for DOM to be fully loaded
			document.addEventListener('DOMContentLoaded', function() {
				// Currency tab switching
				document.querySelectorAll('.currency-tab').forEach(tab => {
					tab.addEventListener('click', function() {
						document.querySelectorAll('.currency-tab').forEach(t => t.classList.remove('active'));
						this.classList.add('active');
						selectedCurrency = this.dataset.currency;
						document.getElementById('currency').textContent = selectedCurrency;
						
						// Clear generated details when switching currencies
						clearGeneratedDetails();
						
						// Show dev message for non-GBP currencies
						if (selectedCurrency !== 'GBP') {
							showDevMessage();
						} else {
							hideDevMessage();
						}
					});
				});

				// Format sort code input
				document.getElementById('sortCode').addEventListener('input', function(e) {
					let value = e.target.value.replace(/\D/g, '');
					if (value.length >= 2) value = value.substring(0, 2) + '-' + value.substring(2);
					if (value.length >= 5) value = value.substring(0, 5) + '-' + value.substring(5, 7);
					e.target.value = value;
				});

				// Make functions globally available
				window.generateDetails = generateDetails;
				window.createMerchant = createMerchant;
				window.parseAccountDetails = parseAccountDetails;
			});

			// Generate banking details with real IBAN API for GBP
			async function generateDetails() {
				const fullName = document.getElementById('fullName').value.trim();
				const accountNumber = document.getElementById('accountNumber').value.trim();
				const sortCode = document.getElementById('sortCode').value.trim();

				if (!fullName || !accountNumber || !sortCode) {
					alert('Please fill in all required fields');
					return;
				}
				
				// Split full name into first and last name
				const nameParts = fullName.split(' ');
				const firstName = nameParts[0] || '';
				const lastName = nameParts.slice(1).join(' ') || '';

				if (selectedCurrency !== 'GBP') {
					alert('Currently only British Pounds (GBP) is supported');
					return;
				}

				// Show loading state
				document.getElementById('iban').textContent = 'Generating...';
				document.getElementById('bic').textContent = 'Loading...';
				document.getElementById('bankName').textContent = 'Loading...';
				
				// Add loading animation
				document.getElementById('iban').classList.add('loading');
				document.getElementById('bic').classList.add('loading');
				document.getElementById('bankName').classList.add('loading');

				// Clean sort code for API (remove dashes)
				const cleanSortCode = sortCode.replace(/-/g, '');
				
				try {
					// Call Vercel function to avoid CORS issues
					const apiUrl = '/api/iban';
					
					console.log('=== VERCEL FUNCTION API CALL ===');
					console.log('🎯 API URL:', apiUrl);
					console.log('📤 HTTP Method: POST');
					console.log('🏦 Bank Code (Sort Code):', cleanSortCode);
					console.log('💳 Account Number:', accountNumber);
					console.log('🌍 Country Code: GB');
					console.log('🚀 Making API call now...');
					
					// Call Vercel function
					const response = await fetch(apiUrl, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							sortCode: sortCode,
							accountNumber: accountNumber
						})
					});
					
					console.log('✅ Response received!');
					console.log('📊 Response Status:', response.status);
					
					const data = await response.json();
					console.log('📦 Response Data:', data);
					console.log('✔️ Data Type:', typeof data);
					console.log('🔍 Data Keys:', Object.keys(data));
					
					if (response.ok && data.success) {
						console.log('✅ IBAN GENERATED successfully via Vercel function');
						console.log('🆔 Generated IBAN:', data.iban);
						console.log('🏛️ Bank Name:', data.bank || 'Bank name not provided');
						console.log('🏦 BIC:', data.bic || 'BIC not provided');
						console.log('🏢 Branch:', data.branch || 'Branch not provided');
						
						document.getElementById('iban').textContent = data.iban;
						document.getElementById('bic').textContent = data.bic || 'N/A';
						document.getElementById('bankName').textContent = data.bank || 'UK Bank';
						
						// Populate additional bank details
						document.getElementById('branch').textContent = data.branch || 'N/A';
						document.getElementById('address').textContent = data.address || 'N/A';
						document.getElementById('city').textContent = data.city || 'N/A';
						document.getElementById('zip').textContent = data.zip || 'N/A';
						document.getElementById('phone').textContent = data.phone || 'N/A';
					} else {
						console.log('❌ IBAN GENERATION FAILED');
						console.log('📄 Error:', data.error || 'Unknown error');
						console.log('📝 Message:', data.message || 'No message provided');
						
						const errorMessage = data.message || data.error || 'Unable to generate IBAN. Please check your sort code and account number.';
						alert(errorMessage);
						return;
					}
				} catch (error) {
					console.error('IBAN API Error:', error);
					console.error('Error type:', error.name);
					console.error('Error message:', error.message);
					
					alert('IBAN validation service is currently unavailable. Please try again later.');
					return;
				}

				// Remove loading animation
				document.getElementById('iban').classList.remove('loading');
				document.getElementById('bic').classList.remove('loading');
				document.getElementById('bankName').classList.remove('loading');

				// Update other details
				document.getElementById('displayFullName').textContent = fullName;
				document.getElementById('displayFirstName').textContent = firstName || 'N/A';
				document.getElementById('displayLastName').textContent = lastName || 'N/A';
				document.getElementById('accountHolder').textContent = fullName;
				document.getElementById('displayAccountNumber').textContent = accountNumber;
				document.getElementById('displaySortCode').textContent = sortCode;
				// Use the actual Router Fusion user ID from your organization
				document.getElementById('userId').textContent = 'db5e3583-9ca0-45fc-87b6-dceeddd120a6';
			}

			// Create merchant functionality
			async function createMerchant() {
				const accountHolder = document.getElementById('accountHolder').textContent;
				const iban = document.getElementById('iban').textContent;
				
				if (accountHolder === '-' || iban === '-') {
					alert('Please generate banking details first');
					return;
				}
				
				console.log('🚀 Starting beneficiary creation process...');
				
				// Show loading overlay
				showLoading();
				
				try {
					// Collect data from generated details
					const merchantData = collectMerchantData();
					
					console.log('📦 Beneficiary Data Collected:', merchantData);
					
					// Call GraphQL mutation
					const result = await createPersonalBeneficiary(merchantData);
					
					console.log('✅ Beneficiary created successfully:', result);
					
					// Hide loading and show success modal
					hideLoading();
					showModal(
						'success',
						'Beneficiary Created Successfully!',
						`Your beneficiary has been created for ${accountHolder}.`,
						{
							'Beneficiary ID': result.id || 'Generated',
							'IBAN': iban,
							'Status': 'Active',
							'Account Holder': accountHolder
						}
					);
					
					// Reset forms after successful creation
					resetForms();
					
				} catch (error) {
					console.error('❌ Beneficiary creation failed:', error);
					
					// Hide loading and show error modal
					hideLoading();
					showModal(
						'error',
						'Beneficiary Creation Failed',
						'There was an error creating your beneficiary. Please try again.',
						{
							'Error': error.message,
							'Account Holder': accountHolder,
							'IBAN': iban
						}
					);
				}
			}
			
			// Show loading overlay
			function showLoading() {
				document.getElementById('loadingOverlay').style.display = 'flex';
			}
			
			// Hide loading overlay
			function hideLoading() {
				document.getElementById('loadingOverlay').style.display = 'none';
			}
			
			// Show result modal
			function showModal(type, title, message, details = null) {
				const modal = document.getElementById('resultModal');
				const modalTitle = document.getElementById('modalTitle');
				const modalIcon = document.getElementById('modalIcon');
				const modalMessage = document.getElementById('modalMessage');
				const modalDetails = document.getElementById('modalDetails');
				
				// Set title
				modalTitle.textContent = title;
				
				// Set icon and message
				modalIcon.className = `modal-icon ${type}`;
				modalIcon.textContent = type === 'success' ? '✅' : '❌';
				modalMessage.textContent = message;
				
				// Set details if provided
				if (details) {
					let detailsText = '';
					for (const [key, value] of Object.entries(details)) {
						detailsText += `${key}: ${value}\n`;
					}
					modalDetails.innerHTML = `<pre>${detailsText}</pre>`;
					modalDetails.style.display = 'block';
				} else {
					modalDetails.style.display = 'none';
				}
				
				// Show modal
				modal.style.display = 'flex';
			}
			
			// Close modal
			function closeModal() {
				document.getElementById('resultModal').style.display = 'none';
			}
			
			// Make closeModal globally accessible
			window.closeModal = closeModal;
			
			// Reset all forms and generated details
			function resetForms() {
				// Reset input forms
				document.getElementById('fullName').value = '';
				document.getElementById('accountNumber').value = '';
				document.getElementById('sortCode').value = '';
				
				// Reset all generated details to default state
				document.getElementById('iban').textContent = '-';
				document.getElementById('bankName').textContent = '-';
				document.getElementById('bic').textContent = '-';
				document.getElementById('branch').textContent = '-';
				document.getElementById('displayFullName').textContent = '-';
				document.getElementById('displayFirstName').textContent = '-';
				document.getElementById('displayLastName').textContent = '-';
				document.getElementById('accountHolder').textContent = '-';
				document.getElementById('displayAccountNumber').textContent = '-';
				document.getElementById('displaySortCode').textContent = '-';
				document.getElementById('address').textContent = '-';
				document.getElementById('city').textContent = '-';
				document.getElementById('zip').textContent = '-';
				document.getElementById('phone').textContent = '-';
				
				console.log('✅ Forms and generated details reset');
			}
			
			// Close modal when clicking outside
			document.addEventListener('click', function(event) {
				const modal = document.getElementById('resultModal');
				if (event.target === modal) {
					closeModal();
				}
			});
			
			// Collect data from generated details for merchant creation
			function collectMerchantData() {
				return {
					// Personal Information
					user_id: document.getElementById('userId').textContent, // Now a proper UUID
					entity_id: document.getElementById('entityId').textContent,
					email: document.getElementById('entityEmail').textContent,
					phone: document.getElementById('phone').textContent !== '-' ? document.getElementById('phone').textContent : null,
					first_name: document.getElementById('displayFirstName').textContent,
					last_name: document.getElementById('displayLastName').textContent,
					
					// Personal Address (using bank address data)
					address1: document.getElementById('address').textContent !== '-' ? document.getElementById('address').textContent : null,
					address2: null,
					city: document.getElementById('city').textContent !== '-' ? document.getElementById('city').textContent : null,
					state_province_region: null,
					postal_code: document.getElementById('zip').textContent !== '-' ? document.getElementById('zip').textContent : null,
					country: "GBR", // ISO3166_1 format (3-letter country code)
					tax_number: null, // TODO: Add to form if needed
					
					// Bank Account Information
					name_on_bank_account: document.getElementById('displayFullName').textContent,
					swift_bic: document.getElementById('bic').textContent,
					account_number: document.getElementById('iban').textContent,
					account_type: "checking", // Default account type (lowercase for Router Fusion enum)
					routing_code: document.getElementById('displaySortCode').textContent.replace(/-/g, ''),
					currency: "GBP", // ISO4217 format (3-letter currency code)
					
					// Bank Information
					bank_name: document.getElementById('bankName').textContent,
					branch_name: document.getElementById('branch').textContent !== '-' ? document.getElementById('branch').textContent : null,
					bank_address1: document.getElementById('address').textContent !== '-' ? document.getElementById('address').textContent : null,
					bank_address2: null,
					bank_city: document.getElementById('city').textContent !== '-' ? document.getElementById('city').textContent : null,
					bank_state_province_region: null,
					bank_postal_code: document.getElementById('zip').textContent !== '-' ? document.getElementById('zip').textContent : null,
					bank_country: "GBR" // ISO3166_1 format (3-letter country code)
				};
			}
			
			// GraphQL mutation function
			async function createPersonalBeneficiary(data) {
				const apiUrl = '/api/routerfusion';
				
				const mutation = `
					mutation createPersonalBeneficiary (
						$user_id: UUID!
						$entity_id: UUID!
						$email: Email!
						$phone: String
						$first_name: String!
						$last_name: String!
						$address1: String
						$address2: String
						$city: String
						$state_province_region: String
						$postal_code: PostalCode
						$country: ISO3166_1!
						$tax_number: TaxNumber
						$name_on_bank_account: String
						$swift_bic: SwiftBic
						$account_number: BankAccountNumber
						$account_type: AccountType
						$routing_code: BankRoutingCode
						$currency: ISO4217!
						$bank_name: String
						$branch_name: String
						$bank_address1: String
						$bank_address2: String
						$bank_city: String
						$bank_state_province_region: String
						$bank_postal_code: PostalCode
						$bank_country: ISO3166_1!
					) {
						createPersonalBeneficiary (
							user_id: $user_id
							entity_id: $entity_id
							email: $email
							phone: $phone
							first_name: $first_name
							last_name: $last_name
							address1: $address1
							address2: $address2
							city: $city
							state_province_region: $state_province_region
							postal_code: $postal_code
							country: $country
							tax_number: $tax_number
							name_on_bank_account: $name_on_bank_account
							swift_bic: $swift_bic
							account_number: $account_number
							account_type: $account_type
							routing_code: $routing_code
							currency: $currency
							bank_name: $bank_name
							branch_name: $branch_name
							bank_address1: $bank_address1
							bank_address2: $bank_address2
							bank_city: $bank_city
							bank_state_province_region: $bank_state_province_region
							bank_postal_code: $bank_postal_code
							bank_country: $bank_country
						)
					}
				`;
				
				const requestBody = {
					query: mutation,
					variables: data
				};
				
				console.log('🌐 Sending Router Fusion request to:', apiUrl);
				console.log('📤 Request body:', JSON.stringify(requestBody, null, 2));
				
				const response = await fetch(apiUrl, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(requestBody)
				});
				
				console.log('📡 Response status:', response.status);
				
				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}
				
				const result = await response.json();
				
				console.log('📦 GraphQL response:', result);
				
				if (result.errors) {
					throw new Error(`GraphQL errors: ${JSON.stringify(result.errors)}`);
				}
				
				return result.data.createPersonalBeneficiary;
			}

			// Generate UUID v4 function
			function generateUUID() {
				return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
					var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
					return v.toString(16);
				});
			}

			// Helper functions for dev message
			function showDevMessage() {
				document.getElementById('devMessage').style.display = 'block';
			}

			function hideDevMessage() {
				document.getElementById('devMessage').style.display = 'none';
			}

			function clearGeneratedDetails() {
				document.getElementById('iban').textContent = '-';
				document.getElementById('bic').textContent = '-';
				document.getElementById('bankName').textContent = '-';
				document.getElementById('displayFullName').textContent = '-';
				document.getElementById('displayFirstName').textContent = '-';
				document.getElementById('displayLastName').textContent = '-';
				document.getElementById('accountHolder').textContent = '-';
				document.getElementById('displayAccountNumber').textContent = '-';
				document.getElementById('displaySortCode').textContent = '-';
				document.getElementById('userId').textContent = '-';
				document.getElementById('branch').textContent = '-';
				document.getElementById('address').textContent = '-';
				document.getElementById('city').textContent = '-';
				document.getElementById('zip').textContent = '-';
				document.getElementById('phone').textContent = '-';
			}

			// Parse account details from text input
			function parseAccountDetails() {
				const text = document.getElementById('autoParseText').value.trim();
				
				if (!text) {
					// Clear fields if textarea is empty
					document.getElementById('fullName').value = '';
					document.getElementById('accountNumber').value = '';
					document.getElementById('sortCode').value = '';
					return;
				}
				
				console.log('🔍 Parsing text:', text);
				
				// Initialize extracted data
				let extractedName = '';
				let extractedAccount = '';
				let extractedSortCode = '';
				
				// Clean the text and split into lines
				const lines = text.split(/\r?\n/).map(line => line.trim()).filter(line => line);
				
				// Patterns for different formats
				const patterns = {
					// Sort code patterns: XX-XX-XX, XXXXXX, "Sort code: XX-XX-XX"
					sortCode: [
						/(?:sort\s*code\s*[:\-]?\s*)?(\d{2}[-\s]?\d{2}[-\s]?\d{2})/gi,
						/(\d{6})/g
					],
					// Account number patterns: 6-8 digits, "acc: XXXXXXXX", "account: XXXXXXXX"
					accountNumber: [
						/(?:acc(?:ount)?\s*[:\-]?\s*)?(\d{6,8})/gi
					],
					// Name patterns: look for text that doesn't contain numbers or special chars
					name: [
						/(?:name\s*[:\-]?\s*)?([a-zA-Z\s]{2,})/gi
					]
				};
				
				// Extract sort code
				for (const pattern of patterns.sortCode) {
					const matches = [...text.matchAll(pattern)];
					for (const match of matches) {
						const sortCode = match[1].replace(/\s/g, '').replace(/(\d{2})(\d{2})(\d{2})/, '$1-$2-$3');
						if (sortCode.match(/^\d{2}-\d{2}-\d{2}$/)) {
							extractedSortCode = sortCode;
							console.log('✅ Found sort code:', extractedSortCode);
							break;
						}
					}
					if (extractedSortCode) break;
				}
				
				// Extract account number
				for (const pattern of patterns.accountNumber) {
					const matches = [...text.matchAll(pattern)];
					for (const match of matches) {
						const account = match[1];
						// Validate account number (6-8 digits)
						if (account.match(/^\d{6,8}$/) && account !== extractedSortCode.replace(/-/g, '')) {
							extractedAccount = account;
							console.log('✅ Found account number:', extractedAccount);
							break;
						}
					}
					if (extractedAccount) break;
				}
				
				// Extract name - more sophisticated approach
				const textWithoutNumbers = text.replace(/\d+/g, '').replace(/[-:]/g, ' ');
				const words = textWithoutNumbers.split(/\s+/).filter(word => 
					word.length > 1 && 
					/^[a-zA-Z]+$/.test(word) && 
					!['sort', 'code', 'acc', 'account', 'name'].includes(word.toLowerCase())
				);
				
				// Look for name patterns in the original text
				const nameMatches = [
					...text.matchAll(/(?:name\s*[:\-]?\s*)?([a-zA-Z]+(?:\s+[a-zA-Z]+)*)/gi)
				];
				
				// Try to find the best name match
				if (nameMatches.length > 0) {
					// Look for explicit name labels first
					for (const match of nameMatches) {
						const nameCandidate = match[1].trim();
						if (nameCandidate.length > 2 && nameCandidate.split(' ').length >= 1) {
							extractedName = nameCandidate;
							console.log('✅ Found name (labeled):', extractedName);
							break;
						}
					}
				}
				
				// If no labeled name found, try to extract from lines
				if (!extractedName && lines.length > 0) {
					for (const line of lines) {
						// Skip lines that contain numbers (likely account/sort code)
						if (!/\d/.test(line)) {
							const cleanLine = line.replace(/[^\w\s]/g, '').trim();
							if (cleanLine.length > 2 && cleanLine.split(' ').length >= 1) {
								extractedName = cleanLine;
								console.log('✅ Found name (from line):', extractedName);
								break;
							}
						}
					}
				}
				
				// If still no name, try to construct from words
				if (!extractedName && words.length >= 1) {
					// Take first 2-3 words that look like names
					const nameWords = words.slice(0, Math.min(3, words.length));
					if (nameWords.length > 0) {
						extractedName = nameWords.join(' ');
						console.log('✅ Found name (constructed):', extractedName);
					}
				}
				
				// Populate the form fields
				if (extractedName) {
					document.getElementById('fullName').value = extractedName;
					console.log('📝 Set full name:', extractedName);
				}
				
				if (extractedAccount) {
					document.getElementById('accountNumber').value = extractedAccount;
					console.log('📝 Set account number:', extractedAccount);
				}
				
				if (extractedSortCode) {
					document.getElementById('sortCode').value = extractedSortCode;
					console.log('📝 Set sort code:', extractedSortCode);
				}
				
				// Log summary
				console.log('🎯 Parsing Summary:');
				console.log('👤 Name:', extractedName || 'Not found');
				console.log('💳 Account:', extractedAccount || 'Not found');
				console.log('🏦 Sort Code:', extractedSortCode || 'Not found');
			}

			// Calculate BIC/SWIFT code from IBAN
			function calculateBICFromIBAN(iban) {
				if (!iban || iban.length < 8) {
					return 'UNKNOWN';
				}
				
				// Extract components from IBAN
				const countryCode = iban.substring(0, 2);  // GB
				const checkDigits = iban.substring(2, 4);  // 20
				const bankCode = iban.substring(4, 8);     // HLFX
				
				// BIC format: {bank_code}{country_code}{check_digits}
				const bic = bankCode + countryCode + checkDigits;
				
				console.log('🏦 BIC Calculation:');
				console.log('📄 IBAN:', iban);
				console.log('🌍 Country Code:', countryCode);
				console.log('🔢 Check Digits:', checkDigits);
				console.log('🏛️ Bank Code:', bankCode);
				console.log('🆔 Generated BIC:', bic);
				
				return bic;
			}

			// IBAN check digit calculation function (ISO 13616 standard)
			function calculateIBANCheckDigits(countryCode, bankAccountNumber) {
				// Move country code and check digits to end, replace with '00' temporarily
				const rearranged = bankAccountNumber + countryCode + '00';
				
				// Replace letters with numbers (A=10, B=11, ..., Z=35)
				let numericString = '';
				for (let i = 0; i < rearranged.length; i++) {
					const char = rearranged[i];
					if (char >= 'A' && char <= 'Z') {
						numericString += (char.charCodeAt(0) - 55).toString();
					} else {
						numericString += char;
					}
				}
				
				// Calculate mod 97
				let remainder = 0;
				for (let i = 0; i < numericString.length; i++) {
					remainder = (remainder * 10 + parseInt(numericString[i])) % 97;
				}
				
				// Check digits = 98 - remainder
				const checkDigits = 98 - remainder;
				return checkDigits.toString().padStart(2, '0');
			}

		</script>
	</body>
</html>
